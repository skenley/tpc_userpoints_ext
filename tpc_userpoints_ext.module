<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\tpc_userpoints_ext\Entity\QuizConfig;
use Drupal\tpc_userpoints_ext\Entity\TOConfig;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\transaction\Entity\TransactionOperation;
use Drupal\transaction\Entity\Transaction;

/**
 * Implements hook_theme().
 */
function tpc_userpoints_ext_theme() {
  
  return [
    'commerce_price_tpc' => [
      'variables' => [
        'number' => 0,
        'currency' => NULL,
      ],
      'template' => 'commerce-price-tpc',
    ],
    'commerce_order_total_summary_tpc' => [
      'variables' => [
        'order_entity' => NULL,
        'totals' => NULL,
      ],
      'template' => 'commerce-order-total-summary-tpc',
    ],
    'tpc_monthly_report_tenants' => [
      'variables' => [
        'tenants' => NULL,
        'actions' => NULL,
      ],
      'template' => 'tpc-monthly-report-tenants',
    ],
    'tpc_monthly_report_actions' => [
      'variables' => [],
      'template' => 'tpc-monthly-report-actions',
    ],
    'tpc_monthly_report_confirm_page' => [
      'variables' => [
        'message' => NULL,
      ],
      'template' => 'tpc-monthly-report-confirm-page',
    ],
    'tpc_monthly_report_pager_item' => [
      'variables' => [
        'item' => NULL,
      ],
      'template' => 'tpc-monthly-report-pager-item',
    ],
    'tpc_quiz_list' => [
      'variables' => [
        'quizList' => NULL,
      ],
      'template' => 'tpc-quiz-list-block',
    ],
    'tpc_monthly_report_instructions' => [
      'variables' => [],
      'template' => 'tpc-monthly-report-instructions',
    ],
    'tpc_quiz_button' => [
      'variables' => [
        'quizButton' => NULL,
      ],
      'template' => 'tpc-quiz-button-block',
    ],
  ];
  
}
 
/**
 * Implements hook_form_alter().
 */
function tpc_userpoints_ext_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  
  if ($form_id == 'transaction_operation_edit_form' || $form_id == 'transaction_operation_add_form') {
    
    // Attempt to load the custom configuration associated with the transaction
    // operation ID. The ID of the TOConfig object is the same as the machine
    // name of the associated transaction ID.
    $confID = $form['id']['#default_value'];
    $conf = TOConfig::load($confID);
    $defaultPoints = 0;
    
    if(!empty($conf)) {
      
      $defaultPoints = $conf->getDefaultPointValue();
      
    }
    
    $form['points_value'] = array(
      '#type' => 'number',
      '#title' => t('Points Value'),
      '#weight' => 1,
      '#default_value' => $defaultPoints,
    );
    
    $form['actions']['submit']['#submit'][] = 'transactionOpCustSub';
    
  }
  else if ($form_id == "transaction_operation_delete_form") {
    
    $form['actions']['submit']['#submit'][] = 'transactionOpCustDeleteSub';
    
  }
  // The form for adding a transaction on the user page
  else if ($form_id == "transaction_userpoints_default_points_add_form" || 
    $form_id == "transaction_userpoints_default_points_edit_form") {
    
    // Make the amount field read-only so that only the system can 
    // alter its value
    $form['field_userpoints_default_amount']['widget'][0]['value']
      ['#attributes']['readonly'] = 'readonly';
    
    // AJAX setup for when the operation is selected
    $form['operation']['widget']['#ajax'] = [
      'callback' => 'updateAmountOnOpChange',
      'disable-refocus' => TRUE,
      'event' => 'change',
      'wrapper' => 'operation',
      'progress' => [
        'type' => 'throbber',
        'message' => 'Loading...',
      ],
    ];
    
  }
  else if($form_id == 'views_form_points_management_page_points_management') {
    
    // Store the no option default to add with the rest of the options.
    $noOption = $form['header']['views_bulk_operations_bulk_form_1']
      ['action']['#options'][''];
    $toConfs = TOConfig::loadMultiple();
    $actionOptions = ['' => $noOption];
    
    // Loop over each custom config for Transaction Operations, and add an
    // action to the list of actions that can be taken for each one.
    foreach($toConfs as $conf) {
      
      $transOp = TransactionOperation::load($conf->id());
      $actionOptions[$conf->id()] = $transOp->label();
      
    }
    
    // Overwrite the actions select element options, and form validation
    // and submission
    $submitHandler = $form['#submit'][0];
    $form['header']['views_bulk_operations_bulk_form_1']
      ['action']['#options'] = $actionOptions;
    $form['actions']['submit']['#submit'] = ['pointsManagementSubmission', 
      $submitHandler];
    $form['#validate'] = ['pointsManagementValidation'];
    $form['#submit'] = ['pointsManagementSubmission', 
      $submitHandler];
    
  }
  else if($form_id == 'commerce_checkout_flow_multistep_default') {
    
    $form['#attached']['library'][] = 'tpc_userpoints_ext/payment-info-hide';
    
  }
  else if($form_id == 'node_q_quiz_form' || 
    $form_id == 'node_q_quiz_edit_form'){
    
    $pointVal = 0;
    $conf = QuizConfig::load($form_state->getFormObject()->getEntity()->id());
    
    // If there exists a config for this quiz node, load the stored point
    // value.
    if(!empty($conf)) {
      
      $pointVal = $conf->getPointValue();
      
    }
    
    $form['userpoints_value'] = array(
      '#type' => 'number',
      '#title' => t('Userpoints Value'),
      '#weight' => 1,
      '#default_value' => $pointVal,
      '#description' => 'The userpoints amount awarded to a user when they ' .
        'pass the quiz for the first time.',
    );
    $form['actions']['submit']['#submit'][] = 'quizFormSubmit';
    
  }
  else if ($form_id == 'node_q_quiz_delete_form') {
    
    $form['actions']['submit']['#submit'][] = 'quizDeleteSub';
    
  }
  
}

/**
 * Implements hook_rebuild to run code after cache clear
 */
function tpc_userpoints_ext_rebuild() {
  
  // Rebuild the MonthlyReportEntry actions list
  $fieldStorage = FieldStorageConfig::loadByName('tpc_monthly_report_entry', 
    'field_tpc_re_actions');
  $actionOptions = [];
  $toConfs = $toConfs = TOConfig::loadMultiple();
    
  // Loop over each custom config for Transaction Operations, and add an
  // action to the list of actions that can be taken for each one.
  // TODO: Copied from hook_form_alter for the views bulk operation page.
  // Probably should be encapsulated into a function
  foreach($toConfs as $conf) {
    
    $transOp = TransactionOperation::load($conf->id());
    $actionOptions[$conf->id()] = $transOp->label();
    
  }
  
  $fieldStorage->setSetting('allowed_values', $actionOptions);
  $fieldStorage->save();
  
}

/********************
 * Custom Functions *
 ********************/
 
/**
 * Transaction Operation Form Custom Submission Handler
 */
function transactionOpCustSub($form, $formState) {
  
  // Attempt to load a transaction operation config
  $submittedVals = $formState->getValues();
  $confID = $submittedVals['id'];
  $conf = TOConfig::load($confID);
  
  // If there already exists a config object, update it. Otherwise,
  // create a new one.
  if(!empty($conf)) {
    
    $conf->setDefaultPointValue($submittedVals['points_value']);
    $conf->save();
    
  }
  else {
    
    $conf = TOConfig::create([
      'id' => $confID,
      'defaultPointValue' => intval($submittedVals['points_value']),
    ]);
    $conf->save();
    
  }
  
}

/**
 * Custom submit handler for the transaction operation delete form.
 */
function transactionOpCustDeleteSub($form, $formState) {
  
  $deleteOpID = $formState->getFormObject()->getEntity()->id();
  $confToDelete = TOConfig::load($deleteOpID);
  
  // If there is a config object associated with the TO object about to be
  // deleted, then delete the config too.
  if(!empty($confToDelete)) {
    
    $confToDelete->delete();
    
  }
  
}

/**
 * AJAX callback function for the transaction operation add form. It
 * is responsible for populating the readonly amount field with a point 
 * value from the selected transaction operation.
 */
function updateAmountOnOpChange(&$form, $formState) {
  
  
  $operationID = $formState->getValue('operation')[0]['target_id'];
  $conf = TOConfig::load($operationID);
  $response = new AjaxResponse();
  $selector = '#edit-field-userpoints-default-amount-0-value';
  $method = 'val';
  $arguments = '';
  
  // If there is a TOConfig associated with this transaction op, then
  // set the amount field equal to the point value. Otherwise, set it
  // to 0.
  if(!empty($conf)) {
  
    $arguments = [$conf->getDefaultPointValue()];
    
  }
  else {
    
    $arguments = [0];
    
  }
  
  $response->addCommand(new InvokeCommand($selector, $method, $arguments));
  return $response;
  
}

/**
 * Function to be called before points management Views Bulk Operation 
 * form submission. This sets a session variable to denote what transaction
 * operation the UserPointsTransactionAction instance to execute for.
 */
function pointsManagementSubmission(&$form, &$formState) {
  
  // Session variable setup
  $transOpID = $formState->getValues()['action'];
  $_SESSION['toid'] = $transOpID;
  
  // Reset the value of action to the hard coded value so the VBO Form 
  // submitter knows what VBO Action Plugin to use.
  $formState->setValue('action', 'tpc_userpoints_ext_transaction_action');
  
}

/**
 * Validation method for the points management views bulk operation form.
 * It checks to make sure that there is at least one user selected, and 
 * that there is an transaction operation selected.
 */
function pointsManagementValidation(&$form, $formState) {
  
  $usersSelected = $formState->getValues()['views_bulk_operations_bulk_form_1'];
  $action = $formState->getValues()['action'];
  $atLeastOneUser = FALSE;
  
  // If a user is selected, it has a string value in this array. Otherwise,
  // it will have an integer value of 0. Therefore, if there is at least 
  // one user whose type is string, at least one user has been selected.
  foreach($usersSelected as $user) {
    
    if(gettype($user) == 'string') {
      
      $atLeastOneUser = TRUE;
      break;
      
    }
    
  }
  
  // If at least one user is selected and an action has been selected,
  // just break out of the function to allow submission.
  if($atLeastOneUser && !empty($action)) {
    
    return TRUE;
    
  }
  // If there wasn't at least one user selected, mark the error as being
  // caused by not having selected a user.
  else if(!$atLeastOneUser) {
    
    $formState->setErrorByName('views_bulk_operations_bulk_form_1', 
  'One user must at least be selected.');
    
  }
  // If we've reached here, the error is because no action was selected.
  else {
    
    $formState->setErrorByName('action', 
  'A user transaction operation must be selected.');
    
  }
  
}

function quizFormSubmit(&$form, $formState) {
  
  $qid = $formState->getFormObject()->getEntity()->id();
  $pointVal = intval($formState->getValues()['userpoints_value']);
  
  $conf = QuizConfig::load($qid);
  
  // If no config exists for the quiz ID, create a config.
  if(empty($conf)) {
    
    $conf = QuizConfig::create([
      'id' => $qid,
      'pointValue' => $pointVal,
    ]);
    
  }
  // Otherwise update the config with the new point value.
  else {
    
    $conf->setPointValue($pointVal);
    
  }
  
  $conf->save();
  
}

function quizDeleteSub($form, $formState) {
  
  $deleteOpID = $formState->getFormObject()->getEntity()->id();
  $confToDelete = QuizConfig::load($deleteOpID);
  
  // If there is a config object associated with the Quiz object about to be
  // deleted, then delete the config too.
  if(!empty($confToDelete)) {
    
    $confToDelete->delete();
    
  }
  
}

function monthlyReportEntryAllowedValues(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  
  $options = [];
  $operationConfigs = TOConfig::loadMultiple();
  
  foreach($operationConfigs as $conf) {
    
    $confID = $conf->id();
    
    if($confID != 'userpoints_q_quiz_passed' 
      && $confID != 'userpoints_commerce_transaction') {
      
      $options[$confID] = TransactionOperation::load($conf->id())->label();
      
    }
    
  }
  
  return $options;
  
}

/**
 * Implements hook_mail
 */
function tpc_userpoints_ext_mail($key, &$message, $params) {
  
  $options = array(
    'langcode' => $message['langcode'],
  );
  
  if($key == 'new_monthly_report') {
  
    $body = "A new monthly report has been submitted. \n\n" . 
      "You can review the report here: " . $params['reportUrl'];
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['subject'] = 'New Monthly Report';
    $message['body'][] = $body;
    
  }
  
}