<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\tpc_userpoints_ext\Entity\TOConfig;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;

/**
 * Implements hook_form_alter().
 */
function tpc_userpoints_ext_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  
  if ($form_id == 'transaction_operation_edit_form' || $form_id == 'transaction_operation_add_form') {
    
    // Attempt to load the custom configuration associated with the transaction
    // operation ID. The ID of the TOConfig object is the same as the machine
    // name of the associated transaction ID.
    $confID = $form['id']['#default_value'];
    $conf = TOConfig::load($confID);
    $defaultPoints = 0;
    
    if(!empty($conf)) {
      
      $defaultPoints = $conf->getDefaultPointValue();
      
    }
    
    $form['points_value'] = array(
      '#type' => 'number',
      '#title' => t('Points Value'),
      '#weight' => 1,
      '#default_value' => $defaultPoints,
    );
    
    $form['actions']['submit']['#submit'][] = 'transactionOpCustSub';
    
  }
  else if ($form_id == "transaction_operation_delete_form") {
    
    $form['actions']['submit']['#submit'][] = 'transactionOpCustDeleteSub';
    
  }
  else if ($form_id == "transaction_userpoints_default_points_add_form" || 
    $form_id == "transaction_userpoints_default_points_edit_form") {
    
    // Make the amount field read-only so that only the system can 
    // alter its value
    $form['field_userpoints_default_amount']['widget'][0]['value']
      ['#attributes']['readonly'] = 'readonly';
    
    // AJAX setup for when the operation is selected
    $form['operation']['widget']['#ajax'] = [
      'callback' => 'updateAmountOnOpChange',
      'disable-refocus' => TRUE,
      'event' => 'change',
      'wrapper' => 'operation',
      'progress' => [
        'type' => 'throbber',
        'message' => 'Loading...',
      ],
    ];
    
  }
  
}

/********************
 * Custom Functions *
 ********************/
 
/**
 * Transaction Operation Form Custom Submission Handler
 */
function transactionOpCustSub($form, $formState) {
  
  // Attempt to load a transaction operation config
  $submittedVals = $formState->getValues();
  $confID = $submittedVals['id'];
  $conf = TOConfig::load($confID);
  
  // If there already exists a config object, update it. Otherwise,
  // create a new one.
  if(!empty($conf)) {
    
    $conf->setDefaultPointValue($submittedVals['points_value']);
    $conf->save();
    
  }
  else {
    
    $conf = TOConfig::create([
      'id' => $confID,
      'defaultPointValue' => intval($submittedVals['points_value']),
    ]);
    $conf->save();
    
  }
  
}

/**
 * Custom submit handler for the transaction operation delete form.
 */
function transactionOpCustDeleteSub($form, $formState) {
  
  $deleteOpID = $formState->getFormObject()->getEntity()->id();
  $confToDelete = TOConfig::load($deleteOpID);
  
  // If there is a config object associated with the TO object about to be
  // deleted, then delete the config too.
  if(!empty($confToDelete)) {
    
    $confToDelete->delete();
    
  }
  
}

function updateAmountOnOpChange(&$form, $formState) {
  
  
  $operationID = $formState->getValue('operation')[0]['target_id'];
  $conf = TOConfig::load($operationID);
  $response = new AjaxResponse();
  $selector = '#edit-field-userpoints-default-amount-0-value';
  $method = 'val';
  $arguments = '';
  
  // If there is a TOConfig associated with this transaction op, then
  // set the amount field equal to the point value. Otherwise, set it
  // to 0.
  if(!empty($conf)) {
  
    $arguments = [$conf->getDefaultPointValue()];
    
  }
  else {
    
    $arguments = [0];
    
  }
  
  $response->addCommand(new InvokeCommand($selector, $method, $arguments));
  return $response;
  
}
