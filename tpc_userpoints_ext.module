<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\tpc_userpoints_ext\Entity\TOConfig;

/**
 * Implements hook_form_alter().
 */
function tpc_userpoints_ext_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  
  if ($form_id == 'transaction_operation_edit_form' || $form_id == 'transaction_operation_add_form') {
    
    // Attempt to load the custom configuration associated with the transaction
    // operation ID. The ID of the TOConfig object is the same as the machine
    // name of the associated transaction ID.
    $confID = $form['id']['#default_value'];
    $conf = TOConfig::load($confID);
    $defaultPoints = 0;
    
    if(!empty($conf)) {
      
      $defaultPoints = $conf->getDefaultPointValue();
      
    }
    
    $form['points_value'] = array(
      '#type' => 'number',
      '#title' => t('Points Value'),
      '#weight' => 1,
      '#default_value' => $defaultPoints,
    );
    
    $form['actions']['submit']['#submit'][] = 'transactionOpCustSub';
  }
  
}

/********************
 * Custom Functions *
 ********************/
 
/**
 * Transaction Operation Form Custom Submission Handler
 */
function transactionOpCustSub($form, $formState) {
  
  // Attempt to load a transaction operation config
  $submittedVals = $formState->getValues();
  $confID = $submittedVals['id'];
  $conf = TOConfig::load($confID);
  
  // If there already exists a config object, update it. Otherwise,
  // create a new one.
  if(!empty($conf)) {
    
    $conf->setDefaultPointValue($submittedVals['points_value']);
    $conf->save();
    
  }
  else {
    
    $conf = TOConfig::create([
      'id' => $confID,
      'defaultPointValue' => intval($submittedVals['points_value']),
    ]);
    $conf->save();
    
  }
  
}